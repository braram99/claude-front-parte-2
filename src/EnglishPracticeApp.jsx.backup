// src/EnglishPracticeApp.jsx - VERSION SIMPLE PARA DEBUG
import React, { useState, useEffect, useRef } from 'react';
import { Mic, Square, Play, RotateCcw, Home, Bug } from 'lucide-react';

// 🤖 AI SERVICE SIMPLE INTEGRADO
class SimpleAIService {
  constructor() {
    this.sessionId = Date.now();
    this.callCount = 0;
    console.log(`🤖 SimpleAI initialized - Session: ${this.sessionId}`);
  }

  async analyzeAndRespond(question, transcript, attempt = 1) {
    this.callCount++;
    const callId = `${this.sessionId}-${this.callCount}`;
    
    console.log(`🔍 [AI Call ${callId}] START:`, {
      question,
      transcript,
      attempt,
      callCount: this.callCount,
      timestamp: new Date().toISOString()
    });

    // Limpieza de transcript más robusta
    if (!transcript || transcript.trim().length === 0 || transcript.includes('Audio response')) {
      console.log(`⚠️ [AI Call ${callId}] Empty/generic transcript, using sample response`);
      
      // Respuestas más realistas para testing
      const sampleResponses = [
        "I really enjoy reading books because they help me relax and learn new things",
        "My favorite hobby is playing guitar and I practice every day after work", 
        "I love cooking different cuisines especially Italian and Asian food",
        "I like watching movies and spending time with my family on weekends",
        "Art is interesting",
        "I enjoy running in the park every morning because it keeps me healthy",
        "My hobby is photography and I love capturing beautiful landscapes",
        "I like playing video games with my friends online",
        "Music",
        "I enjoy traveling to new places and experiencing different cultures"
      ];
      
      transcript = sampleResponses[(attempt - 1) % sampleResponses.length];
      console.log(`🔄 [AI Call ${callId}] Using sample transcript:`, transcript);
    }
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Análisis más realista del transcript
    const cleanTranscript = transcript.trim().toLowerCase();
    const words = cleanTranscript.split(/\s+/).filter(w => w.length > 0);
    const wordCount = words.length;
    
    // Detectar palabras positivas/avanzadas para score bonus
    const positiveWords = ['love', 'enjoy', 'really', 'amazing', 'wonderful', 'great', 'fantastic'];
    const advancedWords = ['because', 'however', 'therefore', 'especially', 'experience', 'different'];
    
    const positiveCount = words.filter(w => positiveWords.includes(w)).length;
    const advancedCount = words.filter(w => advancedWords.includes(w)).length;
    
    console.log(`📊 [AI Call ${callId}] Analysis:`, {
      wordCount,
      positiveCount,
      advancedCount,
      transcript: transcript.substring(0, 50) + '...'
    });
    
    // Score más sofisticado
    let baseScore = 25;
    
    // Score por longitud
    if (wordCount >= 15) baseScore += 40;
    else if (wordCount >= 10) baseScore += 30;
    else if (wordCount >= 5) baseScore += 20;
    else if (wordCount >= 2) baseScore += 10;
    
    // Bonus por palabras positivas y avanzadas
    baseScore += (positiveCount * 5);
    baseScore += (advancedCount * 8);
    
    // Variación por intento (importante para diferencias)
    const attemptVariation = (attempt * 11) % 30; // Más variación
    const randomVariation = Math.random() * 25 - 12.5; // +/- 12.5
    
    const finalScore = Math.max(15, Math.min(100, Math.round(baseScore + attemptVariation + randomVariation)));

    // Mensajes únicos más variados
    const messagesByScore = {
      excellent: [
        "Outstanding work! Your English is truly impressive and natural.",
        "Exceptional! You're speaking with remarkable confidence and fluency.",
        "Brilliant! Your vocabulary and expression are excellent.",
        "Amazing! You sound like a native speaker - fantastic progress!"
      ],
      good: [
        "Great job! You're communicating very clearly and effectively.",
        "Well done! Your English is flowing beautifully and naturally.",
        "Excellent effort! You're expressing yourself with confidence.",
        "Wonderful! Your speaking skills are really developing nicely."
      ],
      okay: [
        "Good work! You're making steady and consistent progress.",
        "Nice effort! You're building your confidence step by step.",
        "Keep going! Every practice session helps you improve significantly.",
        "Solid attempt! You're getting more comfortable with English."
      ],
      basic: [
        "Good start! Try to speak a bit longer next time.",
        "Keep practicing! Every word counts in your learning journey.",
        "Nice try! Don't worry, improvement comes with regular practice.",
        "Keep it up! You're on the right path to fluency."
      ]
    };
    
    const moods = ['encouraging', 'enthusiastic', 'supportive', 'positive', 'gentle', 'excited', 'warm'];
    
    let category = 'basic';
    if (finalScore >= 85) category = 'excellent';
    else if (finalScore >= 70) category = 'good';
    else if (finalScore >= 50) category = 'okay';
    
    const messageIndex = (attempt - 1) % messagesByScore[category].length;
    const selectedMessage = messagesByScore[category][messageIndex];
    const selectedMood = moods[(attempt - 1) % moods.length];
    
    // Sugerencias variables
    const allSuggestions = [
      `Try speaking for longer - aim for 15+ words (attempt ${attempt})`,
      "Add more details to make your answer richer and more interesting",
      "Use connecting words like 'because', 'however', or 'although'",
      "Express your emotions - tell me how you feel about it",
      "Try using more descriptive adjectives in your speech",
      "Practice with different types of questions regularly",
      "Don't worry about mistakes - focus on communication",
      "Record yourself speaking for even longer next time"
    ];
    
    const suggestions = [
      allSuggestions[(attempt - 1) % allSuggestions.length],
      allSuggestions[((attempt - 1) + 3) % allSuggestions.length]
    ];
    
    // Follow-up questions más variadas
    const followUps = [
      `That's fascinating! Can you tell me more details about that? (Follow-up ${attempt})`,
      `Interesting! What do you like most about that experience?`,
      `How did that make you feel? I'd love to hear more!`,
      `What was the best part of that? Please elaborate!`,
      `Why is that important to you? Tell me your thoughts!`,
      `Can you give me a specific example of that?`,
      `What would you change about that if you could?`,
      `How did other people react when you told them about that?`,
      `What did you learn from that experience?`,
      `Would you recommend that to others? Why or why not?`
    ];
    
    const followUpQuestion = followUps[(attempt - 1) % followUps.length];

    const response = {
      encouragement: selectedMessage,
      score: finalScore,
      suggestions: suggestions,
      confidence: Math.min(0.95, 0.3 + (wordCount * 0.08) + (positiveCount * 0.05)),
      mood: selectedMood,
      audioText: selectedMessage,
      followUpQuestion,
      shouldSpeak: true,
      debug: {
        callId,
        attempt,
        category,
        messageIndex,
        transcript: transcript.substring(0, 100),
        wordCount,
        positiveCount,
        advancedCount,
        baseScore,
        attemptVariation,
        randomVariation,
        finalScore,
        timestamp: new Date().toISOString()
      }
    };

    console.log(`✅ [AI Call ${callId}] RESPONSE:`, response);
    return response;
  }
}

const simpleAI = new SimpleAIService();

// 🎙️ HOOK SIMPLE DE AUDIO
const useSimpleAudio = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState(null);
  const [duration, setDuration] = useState(0);
  const [error, setError] = useState(null);
  
  const mediaRecorderRef = useRef(null);
  const timerRef = useRef(null);
  const startTimeRef = useRef(0);

  const startRecording = async () => {
    try {
      console.log('🎙️ Starting recording...');
      setError(null);
      
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      const chunks = [];
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: 'audio/webm' });
        setAudioBlob(blob);
        stream.getTracks().forEach(track => track.stop());
        console.log('🎙️ Recording completed:', { duration, blobSize: blob.size });
      };
      
      mediaRecorder.start();
      setIsRecording(true);
      startTimeRef.current = Date.now();
      
      // Timer
      timerRef.current = setInterval(() => {
        setDuration(Math.floor((Date.now() - startTimeRef.current) / 1000));
      }, 1000);
      
    } catch (err) {
      console.error('❌ Recording error:', err);
      setError('No se pudo acceder al micrófono');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      console.log('🛑 Stopping recording...');
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    }
  };

  const clearRecording = () => {
    console.log('🧹 Clearing recording...');
    setAudioBlob(null);
    setDuration(0);
    setError(null);
  };

  return {
    isRecording,
    audioBlob,
    duration,
    error,
    startRecording,
    stopRecording,
    clearRecording
  };
};

// 📱 COMPONENTE PRINCIPAL SIMPLE
const EnglishPracticeApp = () => {
  const [currentScreen, setCurrentScreen] = useState('home');
  const [currentQuestion, setCurrentQuestion] = useState("What's your favorite hobby?");
  const [messages, setMessages] = useState([]);
  const [attemptCounter, setAttemptCounter] = useState(1);
  const [isProcessing, setIsProcessing] = useState(false);
  const [debugInfo, setDebugInfo] = useState(null);
  const [showDebug, setShowDebug] = useState(false);
  
  const audio = useSimpleAudio();
  const processedRef = useRef(null);

  // Procesar audio cuando termine la grabación
  useEffect(() => {
    if (audio.audioBlob && 
        !audio.isRecording && 
        !isProcessing && 
        audio.audioBlob !== processedRef.current) {
      
      console.log(`🤖 Processing audio (attempt ${attemptCounter})...`);
      setIsProcessing(true);
      processedRef.current = audio.audioBlob;
      
      // Simular transcripts más realistas para mejor testing
      const fakeTranscripts = [
        "I really like reading books because they help me learn new things",
        "My favorite hobby is playing guitar and I practice every day",
        "I enjoy cooking different types of food on weekends",
        "I love watching movies and spending time with my friends",
        "Reading is good",
        "I like music",
        "My hobby is playing games and I think it's really fun and exciting",
        "I enjoy running in the park every morning because it keeps me healthy",
        "Art",
        "I love traveling to different countries and experiencing new cultures"
      ];
      
      const fakeTranscript = fakeTranscripts[(attemptCounter - 1) % fakeTranscripts.length];
      console.log(`📝 Using fake transcript #${attemptCounter}:`, fakeTranscript);
      
      setTimeout(async () => {
        try {
          const aiResponse = await simpleAI.analyzeAndRespond(
            currentQuestion, 
            fakeTranscript, 
            attemptCounter
          );
          
          // Agregar mensajes al chat
          const userMessage = {
            id: Date.now(),
            type: 'user',
            content: fakeTranscript,
            timestamp: new Date().toLocaleTimeString(),
            attempt: attemptCounter
          };
          
          const aiMessage = {
            id: Date.now() + 1,
            type: 'ai',
            content: aiResponse.encouragement,
            timestamp: new Date().toLocaleTimeString(),
            score: aiResponse.score,
            mood: aiResponse.mood,
            suggestions: aiResponse.suggestions,
            attempt: attemptCounter
          };
          
          setMessages(prev => [...prev, userMessage, aiMessage]);
          
          setDebugInfo({
            attempt: attemptCounter,
            question: currentQuestion,
            transcript: fakeTranscript,
            aiResponse,
            timestamp: new Date().toISOString()
          });
          
          setAttemptCounter(prev => prev + 1);
          
        } catch (error) {
          console.error('❌ AI Error:', error);
        } finally {
          setIsProcessing(false);
        }
      }, 2000);
    }
  }, [audio.audioBlob, audio.isRecording, audio.duration, attemptCounter, currentQuestion, isProcessing]);

  const resetSession = () => {
    console.log('🔄 Resetting session...');
    audio.clearRecording();
    setMessages([]);
    setAttemptCounter(1);
    setDebugInfo(null);
    setIsProcessing(false);
    processedRef.current = null;
  };

  const getNewQuestion = () => {
    const questions = [
      "What's your favorite hobby?",
      "Tell me about your last vacation",
      "How was your day today?",
      "What do you like to do on weekends?",
      "Describe your best friend"
    ];
    
    const newQuestion = questions[Math.floor(Math.random() * questions.length)];
    setCurrentQuestion(newQuestion);
    resetSession();
    console.log('❓ New question:', newQuestion);
  };

  // 🏠 HOME SCREEN
  if (currentScreen === 'home') {
    return (
      <div className="min-h-screen bg-blue-50 p-6">
        <div className="max-w-md mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-800 mb-4">🤖 AI Debug Mode</h1>
            <p className="text-gray-600">Versión simple para debugging del AI</p>
          </div>
          
          <div className="space-y-4">
            <button 
              onClick={() => setCurrentScreen('speaking')}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white p-6 rounded-xl shadow-lg"
            >
              <Mic className="mx-auto mb-2" size={32} />
              <span className="text-xl font-semibold">🎙️ Test AI Responses</span>
              <p className="text-sm text-blue-100 mt-1">Version simple para debug</p>
            </button>
            
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <p className="text-sm font-medium text-gray-700 mb-2">🔧 Debug Features:</p>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Logs detallados en consola</li>
                <li>• Responses variables por intento</li>
                <li>• Scores dinámicos</li>
                <li>• Panel de debug integrado</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // 🎙️ SPEAKING SCREEN
  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <button 
              onClick={() => setCurrentScreen('home')}
              className="p-2 hover:bg-blue-700 rounded mr-3"
            >
              <Home size={20} />
            </button>
            <div>
              <h2 className="font-semibold">🤖 AI Debug Chat</h2>
              <p className="text-sm text-blue-200">
                Attempt #{attemptCounter} | {isProcessing ? 'Processing...' : 'Ready'}
              </p>
            </div>
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={() => setShowDebug(!showDebug)}
              className="p-2 hover:bg-blue-700 rounded"
              title="Toggle Debug"
            >
              <Bug size={20} />
            </button>
            <button
              onClick={getNewQuestion}
              className="p-2 hover:bg-blue-700 rounded"
              title="New Question"
            >
              <RotateCcw size={20} />
            </button>
          </div>
        </div>
      </div>

      {/* Debug Panel */}
      {showDebug && debugInfo && (
        <div className="bg-yellow-50 border-b border-yellow-200 p-4">
          <h3 className="font-semibold text-gray-800 mb-2">🐛 Latest Debug Info</h3>
          <div className="text-sm space-y-1">
            <p><strong>Attempt:</strong> {debugInfo.attempt}</p>
            <p><strong>Question:</strong> {debugInfo.question}</p>
            <p><strong>Transcript:</strong> {debugInfo.transcript}</p>
            <p><strong>Score:</strong> {debugInfo.aiResponse?.score}</p>
            <p><strong>Mood:</strong> {debugInfo.aiResponse?.mood}</p>
            <details className="mt-2">
              <summary className="cursor-pointer text-blue-600">Ver Debug Completo</summary>
              <pre className="text-xs bg-gray-100 p-2 rounded mt-1 overflow-x-auto">
                {JSON.stringify(debugInfo.aiResponse?.debug, null, 2)}
              </pre>
            </details>
          </div>
        </div>
      )}

      {/* Question Display */}
      <div className="bg-white border-b p-4">
        <p className="text-center text-gray-600">
          <strong>Question:</strong> "{currentQuestion}"
        </p>
      </div>

      {/* Messages - UI MEJORADA */}
      <div className="flex-1 p-4 space-y-4 overflow-y-auto bg-gray-50">
        {messages.length === 0 && (
          <div className="text-center py-8">
            <div className="text-6xl mb-4">🤖</div>
            <p className="text-gray-600">¡Haz tu primera grabación para empezar!</p>
            <p className="text-sm text-gray-500 mt-2">
              El AI analizará tu respuesta y te dará feedback único
            </p>
          </div>
        )}
        
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-sm p-4 rounded-xl shadow-sm ${
                message.type === 'user'
                  ? 'bg-blue-500 text-white rounded-br-md'
                  : 'bg-white border border-gray-200 rounded-bl-md'
              }`}
            >
              {/* Message Content */}
              <p className={`text-sm mb-2 ${message.type === 'user' ? 'text-white' : 'text-gray-800'}`}>
                {message.content}
              </p>
              
              {/* AI Response Details */}
              {message.type === 'ai' && (
                <div className="space-y-3">
                  {/* Score Display */}
                  <div className="flex items-center justify-between bg-gray-50 rounded-lg p-3">
                    <div className="flex items-center space-x-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${
                        message.score >= 85 ? 'bg-green-500' :
                        message.score >= 70 ? 'bg-blue-500' :
                        message.score >= 50 ? 'bg-yellow-500' : 'bg-orange-500'
                      }`}>
                        {message.score}
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-800">
                          {message.score >= 85 ? 'Excelente!' :
                           message.score >= 70 ? 'Muy Bien!' :
                           message.score >= 50 ? 'Bien!' : 'Sigue Practicando!'}
                        </p>
                        <p className="text-xs text-gray-500">Intento #{message.attempt}</p>
                      </div>
                    </div>
                    
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                      message.mood === 'enthusiastic' ? 'bg-purple-100 text-purple-700' :
                      message.mood === 'encouraging' ? 'bg-green-100 text-green-700' :
                      message.mood === 'supportive' ? 'bg-blue-100 text-blue-700' :
                      'bg-gray-100 text-gray-700'
                    }`}>
                      {message.mood}
                    </div>
                  </div>
                  
                  {/* Suggestions */}
                  {message.suggestions && message.suggestions.length > 0 && (
                    <div className="bg-yellow-50 border-l-4 border-yellow-400 p-3 rounded">
                      <p className="text-xs font-medium text-yellow-800 mb-1">💡 Consejos:</p>
                      <ul className="space-y-1">
                        {message.suggestions.slice(0, 2).map((suggestion, index) => (
                          <li key={index} className="text-xs text-yellow-700 flex items-start">
                            <span className="text-yellow-500 mr-1 flex-shrink-0">•</span>
                            <span>{suggestion}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )}
              
              {/* User Message Details */}
              {message.type === 'user' && (
                <div className="flex items-center justify-between mt-2 pt-2 border-t border-blue-400">
                  <span className="text-xs text-blue-100">
                    🎙️ Grabación #{message.attempt}
                  </span>
                  <span className="text-xs text-blue-100">
                    {message.timestamp}
                  </span>
                </div>
              )}
              
              {/* AI Message Details */}
              {message.type === 'ai' && (
                <div className="flex items-center justify-between mt-2 pt-2 border-t border-gray-100">
                  <span className="text-xs text-gray-500">
                    🤖 IA Response
                  </span>
                  <span className="text-xs text-gray-500">
                    {message.timestamp}
                  </span>
                </div>
              )}
            </div>
          </div>
        ))}
        
        {/* Processing Indicator - MEJORADO */}
        {isProcessing && (
          <div className="flex justify-start">
            <div className="bg-white border border-gray-200 rounded-xl rounded-bl-md p-4 shadow-sm max-w-sm">
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <div className="w-8 h-8 border-3 border-blue-200 border-t-blue-500 rounded-full animate-spin"></div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-xs">🤖</span>
                  </div>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-800">
                    IA analizando...
                  </p>
                  <p className="text-xs text-gray-500">
                    Intento #{attemptCounter} • Generando respuesta única
                  </p>
                </div>
              </div>
              
              <div className="mt-3 flex space-x-1">
                {[1,2,3,4].map(i => (
                  <div 
                    key={i}
                    className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  />
                ))}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Recording Controls - UI MEJORADA */}
      <div className="bg-white border-t border-gray-200 p-4">
        {/* Main Controls */}
        <div className="flex items-center space-x-3 mb-4">
          <button
            onClick={audio.isRecording ? audio.stopRecording : audio.startRecording}
            disabled={isProcessing}
            className={`flex-1 p-4 rounded-xl flex items-center justify-center space-x-3 text-white font-medium transition-all transform hover:scale-105 disabled:hover:scale-100 disabled:opacity-50 ${
              audio.isRecording
                ? 'bg-red-500 hover:bg-red-600 shadow-lg'
                : isProcessing
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-blue-500 hover:bg-blue-600 shadow-lg'
            }`}
          >
            {audio.isRecording ? (
              <>
                <Square size={24} className="animate-pulse" />
                <div>
                  <span className="text-lg">Parar Grabación</span>
                  <p className="text-sm text-red-100">⏱️ {audio.duration}s</p>
                </div>
              </>
            ) : isProcessing ? (
              <>
                <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                <div>
                  <span className="text-lg">IA Procesando...</span>
                  <p className="text-sm text-gray-200">Intento #{attemptCounter}</p>
                </div>
              </>
            ) : (
              <>
                <Mic size={24} />
                <div>
                  <span className="text-lg">🎙️ Grabar #{attemptCounter}</span>
                  <p className="text-sm text-blue-100">Mantén presionado para grabar</p>
                </div>
              </>
            )}
          </button>
          
          <button
            onClick={resetSession}
            disabled={audio.isRecording || isProcessing}
            className="p-4 bg-gray-500 hover:bg-gray-600 text-white rounded-xl disabled:opacity-50 transition-all"
            title="Reset Session"
          >
            <RotateCcw size={20} />
          </button>
        </div>
        
        {/* Status Bar */}
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${
                audio.isRecording ? 'bg-red-500 animate-pulse' :
                isProcessing ? 'bg-blue-500 animate-pulse' :
                'bg-green-500'
              }`}></div>
              <span className="text-gray-600">
                {audio.isRecording ? 'Grabando...' :
                 isProcessing ? 'IA Analizando...' :
                 'Listo para grabar'}
              </span>
            </div>
            
            <div className="text-gray-500">
              Sesión: {messages.length / 2} conversaciones
            </div>
          </div>
          
          <div className="text-gray-500">
            Próximo: #{attemptCounter}
          </div>
        </div>
        
        {/* Error Display */}
        {audio.error && (
          <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-center space-x-2">
              <span className="text-red-500">⚠️</span>
              <span className="text-sm text-red-700">{audio.error}</span>
            </div>
          </div>
        )}
        
        {/* Quick Tips */}
        <div className="mt-3 bg-blue-50 border border-blue-200 rounded-lg p-3">
          <p className="text-xs text-blue-800 mb-1">💡 <strong>Tips Rápidos:</strong></p>
          <div className="text-xs text-blue-700 space-y-1">
            <p>• Habla por al menos 10-15 segundos para mejor análisis</p>
            <p>• Cada intento recibe un análisis único del IA</p>
            <p>• Abre F12 Console para ver logs detallados</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnglishPracticeApp;